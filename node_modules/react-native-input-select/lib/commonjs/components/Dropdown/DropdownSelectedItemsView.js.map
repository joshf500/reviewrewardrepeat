{"version":3,"sources":["DropdownSelectedItemsView.tsx"],"names":["DropdownSelectedItemsView","placeholder","error","getSelectedItemsLabel","handleToggleModal","isMultiple","selectedItem","selectedItems","dropdownIcon","dropdownStyle","dropdownIconStyle","selectedItemStyle","placeholderStyle","multipleSelectedItemStyle","dropdownErrorStyle","primaryColor","disabled","pressed","inputStyles","inputFocusState","borderColor","input","inputFocusErrorState","styles","selectedItemsContainer","map","item","i","Math","random","backgroundColor","blackText","length","iconStyle","require","StyleSheet","create","position","right","top","flexDirection","flexWrap","alignItems","color","colors","white","paddingHorizontal","paddingVertical","borderRadius","primary","marginRight","overflow","black"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  Pressable,\n  ScrollView,\n  StyleSheet,\n  Image,\n  TouchableOpacity,\n} from 'react-native';\nimport { colors } from '../../styles/colors';\nimport { inputStyles } from '../../styles/input';\n\nconst DropdownSelectedItemsView = ({\n  placeholder,\n  error,\n  getSelectedItemsLabel,\n  handleToggleModal,\n  isMultiple,\n  selectedItem,\n  selectedItems,\n  dropdownIcon,\n  dropdownStyle,\n  dropdownIconStyle,\n  selectedItemStyle,\n  placeholderStyle,\n  multipleSelectedItemStyle,\n  dropdownErrorStyle,\n  primaryColor,\n  disabled,\n}: any) => {\n  return (\n    <Pressable\n      onPress={() => handleToggleModal()}\n      style={({ pressed }) => [\n        pressed && {\n          ...inputStyles.inputFocusState,\n          borderColor: primaryColor,\n        },\n        inputStyles.input,\n        dropdownStyle,\n        error && //this must be last\n          error !== '' &&\n          !pressed && {\n            ...inputStyles.inputFocusErrorState,\n            ...dropdownErrorStyle,\n          },\n      ]}\n      disabled={disabled}\n    >\n      <ScrollView\n        horizontal\n        alwaysBounceHorizontal\n        showsHorizontalScrollIndicator={false}\n      >\n        <View\n          style={styles.selectedItemsContainer}\n          onStartShouldSetResponder={() => true}\n        >\n          {isMultiple ? (\n            getSelectedItemsLabel()?.map((item: any, i: Number) => (\n              <TouchableOpacity\n                onPress={() => handleToggleModal()}\n                key={`react-native-input-select-${Math.random()}-${i}`}\n                disabled={disabled}\n              >\n                <Text\n                  style={[\n                    styles.selectedItems,\n                    { backgroundColor: primaryColor },\n                    multipleSelectedItemStyle,\n                  ]}\n                >\n                  {item}\n                </Text>\n              </TouchableOpacity>\n            ))\n          ) : (\n            <TouchableOpacity\n              onPress={() => handleToggleModal()}\n              disabled={disabled}\n            >\n              <Text style={[styles.blackText, selectedItemStyle]}>\n                {getSelectedItemsLabel()}\n              </Text>\n            </TouchableOpacity>\n          )}\n        </View>\n\n        {!selectedItem && selectedItems?.length === 0 && (\n          <Text style={[styles.blackText, placeholderStyle]}>\n            {placeholder ?? 'Select an option'}\n          </Text>\n        )}\n      </ScrollView>\n      <View style={[styles.iconStyle, dropdownIconStyle]}>\n        {dropdownIcon || (\n          <Image source={require('../../asset/arrow-down.png')} />\n        )}\n      </View>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  iconStyle: { position: 'absolute', right: 25, top: 25 },\n  selectedItemsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    alignItems: 'center',\n  },\n  selectedItems: {\n    color: colors.white,\n    paddingHorizontal: 10,\n    paddingVertical: 5,\n    borderRadius: 10,\n    backgroundColor: colors.primary,\n    marginRight: 10,\n    overflow: 'hidden',\n  },\n  blackText: { color: colors.black },\n});\n\nexport default DropdownSelectedItemsView;\n"]}