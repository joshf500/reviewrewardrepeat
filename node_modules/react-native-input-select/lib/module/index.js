function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useEffect } from 'react';
import { TouchableOpacity, StyleSheet, View } from 'react-native';
import Dropdown from './components/Dropdown/Dropdown';
import DropdownList from './components/Dropdown/DropdownList';
import CustomModal from './components/CustomModal';
import { Input } from './components/Input';
import CheckBox from './components/CheckBox';
import { colors } from './styles/colors';
import { DEFAULT_OPTION_LABEL, DEFAULT_OPTION_VALUE } from './constants';
export const DropdownSelect = _ref => {
  let {
    placeholder,
    label,
    error,
    helperText,
    options,
    optionLabel,
    optionValue,
    onValueChange,
    selectedValue,
    isMultiple,
    isSearchable,
    dropdownIcon,
    labelStyle,
    placeholderStyle,
    dropdownStyle,
    dropdownIconStyle,
    dropdownContainerStyle,
    dropdownErrorStyle,
    dropdownErrorTextStyle,
    dropdownHelperTextStyle,
    selectedItemStyle,
    multipleSelectedItemStyle,
    modalBackgroundStyle,
    modalOptionsContainerStyle,
    searchInputStyle,
    primaryColor,
    disabled,
    checkboxSize,
    checkboxStyle,
    checkboxLabelStyle,
    listHeaderComponent,
    listFooterComponent,
    modalProps,
    hideModal = false,
    ...rest
  } = _ref;
  const [newOptions, setNewOptions] = useState([]);
  const [open, setOpen] = useState(false);
  const [selectAll, setSelectAll] = useState(false);
  const [selectedItem, setSelectedItem] = useState(''); //for single selection

  const [selectedItems, setSelectedItems] = useState([]); //for multiple selection

  const [searchValue, setSearchValue] = useState('');
  useEffect(() => {
    if (options) {
      setNewOptions(options);
    }
  }, [options]);
  useEffect(() => {
    isMultiple ? setSelectedItems(Array.isArray(selectedValue) ? selectedValue : []) : setSelectedItem(selectedValue);
  }, [selectedValue, isMultiple, onValueChange]);
  /*===========================================
   * Selection handlers
   *==========================================*/

  const handleSingleSelection = value => {
    if (selectedItem === value) {
      setSelectedItem(null);
      onValueChange(null); //send value to parent
    } else {
      setSelectedItem(value);
      onValueChange(value); //send value to parent

      setOpen(false); //close modal upon selection
    }
  };

  const handleMultipleSelections = value => {
    setSelectedItems(prevVal => {
      var _selectedValues;

      let selectedValues = [...prevVal];

      if ((_selectedValues = selectedValues) !== null && _selectedValues !== void 0 && _selectedValues.includes(value)) {
        selectedValues = selectedValues.filter(item => item !== value);
      } else {
        selectedValues.push(value);
      }

      setSelectedItems(selectedValues);
      onValueChange(selectedValues); //send value to parent
      //select all checkbox should not be checked if the list contains disabled values

      if (options.filter(item => !item.disabled).length === selectedValues.length) {
        setSelectAll(true);
      } else {
        setSelectAll(false);
      }

      return selectedValues;
    });
  };

  const handleSelectAll = () => {
    setSelectAll(prevVal => {
      const selectedValues = [];
      const filteredOptions = newOptions.filter(item => !item.disabled); //don't select disabled items

      if (!prevVal) {
        for (let i = 0; i < filteredOptions.length; i++) {
          selectedValues.push(filteredOptions[i][optionValue]);
        }
      }

      setSelectedItems(selectedValues);
      onValueChange(selectedValues); //send value to parent

      return !prevVal;
    });
  };
  /*===========================================
   * Get label handler
   *==========================================*/


  const getSelectedItemsLabel = () => {
    if (isMultiple && Array.isArray(selectedItems)) {
      let selectedLabels = [];
      selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.forEach(element => {
        var _options$find;

        let selectedItemLabel = options && ((_options$find = options.find(item => item[optionValue !== null && optionValue !== void 0 ? optionValue : DEFAULT_OPTION_VALUE] === element)) === null || _options$find === void 0 ? void 0 : _options$find[optionLabel]);
        selectedLabels.push(selectedItemLabel);
      });
      return selectedLabels;
    }

    let selectedItemLabel = options && options.find(item => item[optionValue !== null && optionValue !== void 0 ? optionValue : DEFAULT_OPTION_VALUE] === selectedItem);
    return selectedItemLabel === null || selectedItemLabel === void 0 ? void 0 : selectedItemLabel[optionLabel !== null && optionLabel !== void 0 ? optionLabel : DEFAULT_OPTION_LABEL];
  };
  /*===========================================
   * Search
   *==========================================*/


  const onSearch = value => {
    setSearchValue(value);
    let searchText = value.toString().toLocaleLowerCase().trim();
    const regexFilter = new RegExp(searchText, 'i');
    const searchResults = options.filter(item => {
      if (item[optionLabel !== null && optionLabel !== void 0 ? optionLabel : DEFAULT_OPTION_LABEL].toString().toLowerCase().search(regexFilter) !== -1 || item[optionValue !== null && optionValue !== void 0 ? optionValue : DEFAULT_OPTION_VALUE].toString(regexFilter).toLowerCase().search(regexFilter) !== -1) {
        return item;
      }
    });
    setNewOptions(searchResults);
  };
  /*===========================================
   * Modal
   *==========================================*/


  const handleToggleModal = () => {
    setOpen(!open);
    setSearchValue('');
    setNewOptions(options);
  };

  useEffect(() => {
    if (hideModal) {
      setOpen(false);
    }
  }, [hideModal]);
  let primary = primaryColor || colors.gray;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dropdown, _extends({
    label: label,
    placeholder: placeholder,
    helperText: helperText,
    error: error,
    getSelectedItemsLabel: getSelectedItemsLabel,
    selectedItem: selectedItem,
    selectedItems: selectedItems,
    handleToggleModal: handleToggleModal,
    labelStyle: labelStyle,
    dropdownIcon: dropdownIcon,
    dropdownStyle: dropdownStyle,
    dropdownIconStyle: dropdownIconStyle,
    dropdownContainerStyle: dropdownContainerStyle,
    dropdownErrorStyle: dropdownErrorStyle,
    dropdownErrorTextStyle: dropdownErrorTextStyle,
    dropdownHelperTextStyle: dropdownHelperTextStyle,
    selectedItemStyle: selectedItemStyle,
    multipleSelectedItemStyle: multipleSelectedItemStyle,
    isMultiple: isMultiple,
    primaryColor: primary,
    disabled: disabled,
    placeholderStyle: placeholderStyle
  }, rest)), /*#__PURE__*/React.createElement(CustomModal, {
    open: open,
    handleToggleModal: handleToggleModal,
    modalBackgroundStyle: modalBackgroundStyle,
    modalOptionsContainerStyle: modalOptionsContainerStyle,
    onRequestClose: () => {},
    modalProps: modalProps
  }, /*#__PURE__*/React.createElement(DropdownList, {
    ListHeaderComponent: /*#__PURE__*/React.createElement(React.Fragment, null, isSearchable && /*#__PURE__*/React.createElement(Input, {
      value: searchValue,
      onChangeText: text => onSearch(text),
      style: searchInputStyle,
      primaryColor: primary
    }), listHeaderComponent, isMultiple && newOptions.length > 1 && /*#__PURE__*/React.createElement(View, {
      style: styles.optionsContainerStyle
    }, /*#__PURE__*/React.createElement(TouchableOpacity, {
      onPress: () => {}
    }, /*#__PURE__*/React.createElement(CheckBox, {
      value: selectAll,
      label: selectAll ? 'Clear all' : 'Select all',
      onChange: () => handleSelectAll(),
      primaryColor: primary,
      checkboxSize: checkboxSize,
      checkboxStyle: checkboxStyle,
      checkboxLabelStyle: checkboxLabelStyle
    })))),
    ListFooterComponent: listFooterComponent,
    options: newOptions,
    optionLabel: optionLabel,
    optionValue: optionValue,
    isMultiple: isMultiple,
    isSearchable: isSearchable,
    selectedItems: selectedItems,
    selectedItem: selectedItem,
    handleMultipleSelections: handleMultipleSelections,
    handleSingleSelection: handleSingleSelection,
    primaryColor: primary,
    checkboxSize: checkboxSize,
    checkboxStyle: checkboxStyle,
    checkboxLabelStyle: checkboxLabelStyle
  })));
};
const styles = StyleSheet.create({
  optionsContainerStyle: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    flexDirection: 'row'
  }
});
export default DropdownSelect;
//# sourceMappingURL=index.js.map