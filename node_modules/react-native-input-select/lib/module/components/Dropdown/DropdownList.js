function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/* eslint-disable react-native/no-inline-styles */
import React from 'react';
import { View, FlatList, StyleSheet, Text } from 'react-native';
import DropdownListItem from './DropdownListItem';
import { colors } from '../../styles/colors';

const DropdownList = _ref => {
  let {
    options,
    optionLabel,
    optionValue,
    isMultiple,
    isSearchable,
    selectedItems,
    selectedItem,
    handleMultipleSelections,
    handleSingleSelection,
    primaryColor,
    checkboxSize,
    checkboxStyle,
    checkboxLabelStyle,
    ...rest
  } = _ref;
  return /*#__PURE__*/React.createElement(FlatList, _extends({
    data: options,
    extraData: isMultiple ? selectedItems : selectedItem,
    initialNumToRender: 5,
    ListEmptyComponent: /*#__PURE__*/React.createElement(View, {
      style: styles.emptyListStyle
    }, /*#__PURE__*/React.createElement(Text, null, "No options available")),
    contentContainerStyle: [isSearchable ? {
      paddingTop: 0
    } : styles.contentContainerStyle],
    ItemSeparatorComponent: () => /*#__PURE__*/React.createElement(View, {
      style: styles.itemSeparatorStyle
    }),
    renderItem: item => _renderItem(item, {
      optionLabel,
      optionValue,
      isMultiple,
      selectedOption: isMultiple ? selectedItems : selectedItem,
      onChange: isMultiple ? handleMultipleSelections : handleSingleSelection,
      primaryColor,
      checkboxSize,
      checkboxStyle,
      checkboxLabelStyle
    }),
    keyExtractor: (_item, index) => `Options${index}`
  }, rest));
};

const _renderItem = (_ref2, props) => {
  let {
    item
  } = _ref2;
  return /*#__PURE__*/React.createElement(DropdownListItem, {
    item: item,
    optionLabel: props.optionLabel,
    optionValue: props.optionValue,
    isMultiple: props.isMultiple,
    selectedOption: props.selectedOption,
    onChange: props.onChange,
    primaryColor: props.primaryColor,
    checkboxSize: props.checkboxSize,
    checkboxStyle: props.checkboxStyle,
    checkboxLabelStyle: props.checkboxLabelStyle
  });
};

const styles = StyleSheet.create({
  itemSeparatorStyle: {
    backgroundColor: colors.gray,
    height: 1,
    opacity: 0.15
  },
  emptyListStyle: {
    alignItems: 'center',
    width: '100%',
    marginVertical: 20
  },
  contentContainerStyle: {
    paddingTop: 20
  }
});
export default DropdownList;
//# sourceMappingURL=DropdownList.js.map